// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace argoproj {
    export namespace v1alpha1 {
        /**
         * AppProjectSpec is the specification of an AppProject
         */
        export interface AppProjectSpec {
            /**
             * ClusterResourceBlacklist contains list of blacklisted cluster level resources
             */
            clusterResourceBlacklist?: outputs.argoproj.v1alpha1.AppProjectSpecClusterResourceBlacklist[];
            /**
             * ClusterResourceWhitelist contains list of whitelisted cluster level resources
             */
            clusterResourceWhitelist?: outputs.argoproj.v1alpha1.AppProjectSpecClusterResourceWhitelist[];
            /**
             * Description contains optional project description
             */
            description?: string;
            /**
             * Destinations contains list of destinations available for deployment
             */
            destinations?: outputs.argoproj.v1alpha1.AppProjectSpecDestinations[];
            /**
             * NamespaceResourceBlacklist contains list of blacklisted namespace level resources
             */
            namespaceResourceBlacklist?: outputs.argoproj.v1alpha1.AppProjectSpecNamespaceResourceBlacklist[];
            /**
             * NamespaceResourceWhitelist contains list of whitelisted namespace level resources
             */
            namespaceResourceWhitelist?: outputs.argoproj.v1alpha1.AppProjectSpecNamespaceResourceWhitelist[];
            /**
             * OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
             */
            orphanedResources?: outputs.argoproj.v1alpha1.AppProjectSpecOrphanedResources;
            /**
             * Roles are user defined RBAC roles associated with this project
             */
            roles?: outputs.argoproj.v1alpha1.AppProjectSpecRoles[];
            /**
             * SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync
             */
            signatureKeys?: outputs.argoproj.v1alpha1.AppProjectSpecSignatureKeys[];
            /**
             * SourceRepos contains list of repository URLs which can be used for deployment
             */
            sourceRepos?: string[];
            /**
             * SyncWindows controls when syncs can be run for apps in this project
             */
            syncWindows?: outputs.argoproj.v1alpha1.AppProjectSpecSyncWindows[];
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecClusterResourceBlacklist {
            group: string;
            kind: string;
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecClusterResourceWhitelist {
            group: string;
            kind: string;
        }

        /**
         * ApplicationDestination holds information about the application's destination
         */
        export interface AppProjectSpecDestinations {
            /**
             * Name is an alternate way of specifying the target cluster by its symbolic name
             */
            name?: string;
            /**
             * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
             */
            namespace?: string;
            /**
             * Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
             */
            server?: string;
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecNamespaceResourceBlacklist {
            group: string;
            kind: string;
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecNamespaceResourceWhitelist {
            group: string;
            kind: string;
        }

        /**
         * OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
         */
        export interface AppProjectSpecOrphanedResources {
            /**
             * Ignore contains a list of resources that are to be excluded from orphaned resources monitoring
             */
            ignore?: outputs.argoproj.v1alpha1.AppProjectSpecOrphanedResourcesIgnore[];
            /**
             * Warn indicates if warning condition should be created for apps which have orphaned resources
             */
            warn?: boolean;
        }

        /**
         * OrphanedResourceKey is a reference to a resource to be ignored from
         */
        export interface AppProjectSpecOrphanedResourcesIgnore {
            group?: string;
            kind?: string;
            name?: string;
        }

        /**
         * ProjectRole represents a role that has access to a project
         */
        export interface AppProjectSpecRoles {
            /**
             * Description is a description of the role
             */
            description?: string;
            /**
             * Groups are a list of OIDC group claims bound to this role
             */
            groups?: string[];
            /**
             * JWTTokens are a list of generated JWT tokens bound to this role
             */
            jwtTokens?: outputs.argoproj.v1alpha1.AppProjectSpecRolesJwtTokens[];
            /**
             * Name is a name for this role
             */
            name: string;
            /**
             * Policies Stores a list of casbin formated strings that define access policies for the role in the project
             */
            policies?: string[];
        }

        /**
         * JWTToken holds the issuedAt and expiresAt values of a token
         */
        export interface AppProjectSpecRolesJwtTokens {
            exp?: number;
            iat: number;
            id?: string;
        }

        /**
         * SignatureKey is the specification of a key required to verify commit signatures with
         */
        export interface AppProjectSpecSignatureKeys {
            /**
             * The ID of the key in hexadecimal notation
             */
            keyID: string;
        }

        /**
         * SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
         */
        export interface AppProjectSpecSyncWindows {
            /**
             * Applications contains a list of applications that the window will apply to
             */
            applications?: string[];
            /**
             * Clusters contains a list of clusters that the window will apply to
             */
            clusters?: string[];
            /**
             * Duration is the amount of time the sync window will be open
             */
            duration?: string;
            /**
             * Kind defines if the window allows or blocks syncs
             */
            kind?: string;
            /**
             * ManualSync enables manual syncs when they would otherwise be blocked
             */
            manualSync?: boolean;
            /**
             * Namespaces contains a list of namespaces that the window will apply to
             */
            namespaces?: string[];
            /**
             * Schedule is the time the window will begin, specified in cron format
             */
            schedule?: string;
        }

        /**
         * AppProjectStatus contains status information for AppProject CRs
         */
        export interface AppProjectStatus {
            /**
             * JWTTokensByRole contains a list of JWT tokens issued for a given role
             */
            jwtTokensByRole?: {[key: string]: outputs.argoproj.v1alpha1.AppProjectStatusJwtTokensByRole};
        }

        /**
         * JWTTokens represents a list of JWT tokens
         */
        export interface AppProjectStatusJwtTokensByRole {
            items?: outputs.argoproj.v1alpha1.AppProjectStatusJwtTokensByRoleItems[];
        }

        /**
         * JWTToken holds the issuedAt and expiresAt values of a token
         */
        export interface AppProjectStatusJwtTokensByRoleItems {
            exp?: number;
            iat: number;
            id?: string;
        }

        /**
         * Operation contains information about a requested or running operation
         */
        export interface ApplicationOperation {
            /**
             * Info is a list of informational items for this operation
             */
            info?: outputs.argoproj.v1alpha1.ApplicationOperationInfo[];
            /**
             * InitiatedBy contains information about who initiated the operations
             */
            initiatedBy?: outputs.argoproj.v1alpha1.ApplicationOperationInitiatedBy;
            /**
             * Retry controls the strategy to apply if a sync fails
             */
            retry?: outputs.argoproj.v1alpha1.ApplicationOperationRetry;
            /**
             * Sync contains parameters for the operation
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationOperationSync;
        }

        export interface ApplicationOperationInfo {
            name: string;
            value: string;
        }

        /**
         * InitiatedBy contains information about who initiated the operations
         */
        export interface ApplicationOperationInitiatedBy {
            /**
             * Automated is set to true if operation was initiated automatically by the application controller.
             */
            automated?: boolean;
            /**
             * Username contains the name of a user who started operation
             */
            username?: string;
        }

        /**
         * Retry controls the strategy to apply if a sync fails
         */
        export interface ApplicationOperationRetry {
            /**
             * Backoff controls how to backoff on subsequent retries of failed syncs
             */
            backoff?: outputs.argoproj.v1alpha1.ApplicationOperationRetryBackoff;
            /**
             * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
             */
            limit?: number;
        }

        /**
         * Backoff controls how to backoff on subsequent retries of failed syncs
         */
        export interface ApplicationOperationRetryBackoff {
            /**
             * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
             */
            duration?: string;
            /**
             * Factor is a factor to multiply the base duration after each failed retry
             */
            factor?: number;
            /**
             * MaxDuration is the maximum amount of time allowed for the backoff strategy
             */
            maxDuration?: string;
        }

        /**
         * Sync contains parameters for the operation
         */
        export interface ApplicationOperationSync {
            /**
             * DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
             */
            dryRun?: boolean;
            /**
             * Manifests is an optional field that overrides sync source with a local directory for development
             */
            manifests?: string[];
            /**
             * Prune specifies to delete resources from the cluster that are no longer tracked in git
             */
            prune?: boolean;
            /**
             * Resources describes which resources shall be part of the sync
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationOperationSyncResources[];
            /**
             * Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
             */
            revision?: string;
            /**
             * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSource;
            /**
             * SyncOptions provide per-sync sync-options, e.g. Validate=false
             */
            syncOptions?: string[];
            /**
             * SyncStrategy describes how to perform the sync
             */
            syncStrategy?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncStrategy;
        }

        /**
         * SyncOperationResource contains resources to sync.
         */
        export interface ApplicationOperationSyncResources {
            group?: string;
            kind: string;
            name: string;
            namespace?: string;
        }

        /**
         * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
         */
        export interface ApplicationOperationSyncSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationOperationSyncSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnetExtVars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationOperationSyncSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelmFileParameters[];
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelmParameters[];
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationOperationSyncSourceHelmFileParameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationOperationSyncSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationOperationSyncSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationOperationSyncSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationOperationSyncSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationOperationSyncSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationOperationSyncSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * SyncStrategy describes how to perform the sync
         */
        export interface ApplicationOperationSyncSyncStrategy {
            /**
             * Apply will perform a `kubectl apply` to perform the sync.
             */
            apply?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncStrategyApply;
            /**
             * Hook will submit any referenced resources to perform the sync. This is the default strategy
             */
            hook?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncStrategyHook;
        }

        /**
         * Apply will perform a `kubectl apply` to perform the sync.
         */
        export interface ApplicationOperationSyncSyncStrategyApply {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * Hook will submit any referenced resources to perform the sync. This is the default strategy
         */
        export interface ApplicationOperationSyncSyncStrategyHook {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
         */
        export interface ApplicationSpec {
            /**
             * Destination is a reference to the target Kubernetes server and namespace
             */
            destination: outputs.argoproj.v1alpha1.ApplicationSpecDestination;
            /**
             * IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
             */
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSpecIgnoreDifferences[];
            /**
             * Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
             */
            info?: outputs.argoproj.v1alpha1.ApplicationSpecInfo[];
            /**
             * Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.
             */
            project: string;
            /**
             * RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
             */
            revisionHistoryLimit?: number;
            /**
             * Source is a reference to the location of the application's manifests or chart
             */
            source: outputs.argoproj.v1alpha1.ApplicationSpecSource;
            /**
             * SyncPolicy controls when and how a sync will be performed
             */
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSpecSyncPolicy;
        }

        /**
         * Destination is a reference to the target Kubernetes server and namespace
         */
        export interface ApplicationSpecDestination {
            /**
             * Name is an alternate way of specifying the target cluster by its symbolic name
             */
            name?: string;
            /**
             * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
             */
            namespace?: string;
            /**
             * Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
             */
            server?: string;
        }

        /**
         * ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
         */
        export interface ApplicationSpecIgnoreDifferences {
            group?: string;
            jsonPointers: string[];
            kind: string;
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSpecInfo {
            name: string;
            value: string;
        }

        /**
         * Source is a reference to the location of the application's manifests or chart
         */
        export interface ApplicationSpecSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationSpecSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationSpecSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationSpecSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnetExtVars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationSpecSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelmFileParameters[];
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelmParameters[];
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationSpecSourceHelmFileParameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationSpecSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationSpecSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationSpecSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationSpecSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationSpecSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationSpecSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * SyncPolicy controls when and how a sync will be performed
         */
        export interface ApplicationSpecSyncPolicy {
            /**
             * Automated will keep an application synced to the target revision
             */
            automated?: outputs.argoproj.v1alpha1.ApplicationSpecSyncPolicyAutomated;
            /**
             * Retry controls failed sync retry behavior
             */
            retry?: outputs.argoproj.v1alpha1.ApplicationSpecSyncPolicyRetry;
            /**
             * Options allow you to specify whole app sync-options
             */
            syncOptions?: string[];
        }

        /**
         * Automated will keep an application synced to the target revision
         */
        export interface ApplicationSpecSyncPolicyAutomated {
            /**
             * AllowEmpty allows apps have zero live resources (default: false)
             */
            allowEmpty?: boolean;
            /**
             * Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)
             */
            prune?: boolean;
            /**
             * SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)
             */
            selfHeal?: boolean;
        }

        /**
         * Retry controls failed sync retry behavior
         */
        export interface ApplicationSpecSyncPolicyRetry {
            /**
             * Backoff controls how to backoff on subsequent retries of failed syncs
             */
            backoff?: outputs.argoproj.v1alpha1.ApplicationSpecSyncPolicyRetryBackoff;
            /**
             * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
             */
            limit?: number;
        }

        /**
         * Backoff controls how to backoff on subsequent retries of failed syncs
         */
        export interface ApplicationSpecSyncPolicyRetryBackoff {
            /**
             * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
             */
            duration?: string;
            /**
             * Factor is a factor to multiply the base duration after each failed retry
             */
            factor?: number;
            /**
             * MaxDuration is the maximum amount of time allowed for the backoff strategy
             */
            maxDuration?: string;
        }

        /**
         * ApplicationStatus contains status information for the application
         */
        export interface ApplicationStatus {
            /**
             * Conditions is a list of currently observed application conditions
             */
            conditions?: outputs.argoproj.v1alpha1.ApplicationStatusConditions[];
            /**
             * Health contains information about the application's current health status
             */
            health?: outputs.argoproj.v1alpha1.ApplicationStatusHealth;
            /**
             * History contains information about the application's sync history
             */
            history?: outputs.argoproj.v1alpha1.ApplicationStatusHistory[];
            /**
             * ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
             */
            observedAt?: string;
            /**
             * OperationState contains information about any ongoing operations, such as a sync
             */
            operationState?: outputs.argoproj.v1alpha1.ApplicationStatusOperationState;
            /**
             * ReconciledAt indicates when the application state was reconciled using the latest git version
             */
            reconciledAt?: string;
            /**
             * Resources is a list of Kubernetes resources managed by this application
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusResources[];
            /**
             * SourceType specifies the type of this application
             */
            sourceType?: string;
            /**
             * Summary contains a list of URLs and container images used by this application
             */
            summary?: outputs.argoproj.v1alpha1.ApplicationStatusSummary;
            /**
             * Sync contains information about the application's current sync status
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationStatusSync;
        }

        /**
         * ApplicationCondition contains details about an application condition, which is usally an error or warning
         */
        export interface ApplicationStatusConditions {
            /**
             * LastTransitionTime is the time the condition was last observed
             */
            lastTransitionTime?: string;
            /**
             * Message contains human-readable message indicating details about condition
             */
            message: string;
            /**
             * Type is an application condition type
             */
            type: string;
        }

        /**
         * Health contains information about the application's current health status
         */
        export interface ApplicationStatusHealth {
            /**
             * Message is a human-readable informational message describing the health status
             */
            message?: string;
            /**
             * Status holds the status code of the application or resource
             */
            status?: string;
        }

        /**
         * RevisionHistory contains history information about a previous sync
         */
        export interface ApplicationStatusHistory {
            /**
             * DeployStartedAt holds the time the sync operation started
             */
            deployStartedAt?: string;
            /**
             * DeployedAt holds the time the sync operation completed
             */
            deployedAt: string;
            /**
             * ID is an auto incrementing identifier of the RevisionHistory
             */
            id: number;
            /**
             * Revision holds the revision the sync was performed against
             */
            revision: string;
            /**
             * Source is a reference to the application source used for the sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySource;
        }

        /**
         * Source is a reference to the application source used for the sync operation
         */
        export interface ApplicationStatusHistorySource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusHistorySourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnetExtVars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusHistorySourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelmFileParameters[];
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelmParameters[];
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusHistorySourceHelmFileParameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusHistorySourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusHistorySourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusHistorySourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusHistorySourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusHistorySourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusHistorySourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * OperationState contains information about any ongoing operations, such as a sync
         */
        export interface ApplicationStatusOperationState {
            /**
             * FinishedAt contains time of operation completion
             */
            finishedAt?: string;
            /**
             * Message holds any pertinent messages when attempting to perform operation (typically errors).
             */
            message?: string;
            /**
             * Operation is the original requested operation
             */
            operation: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperation;
            /**
             * Phase is the current phase of the operation
             */
            phase: string;
            /**
             * RetryCount contains time of operation retries
             */
            retryCount?: number;
            /**
             * StartedAt contains time of operation start
             */
            startedAt: string;
            /**
             * SyncResult is the result of a Sync operation
             */
            syncResult?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResult;
        }

        /**
         * Operation is the original requested operation
         */
        export interface ApplicationStatusOperationStateOperation {
            /**
             * Info is a list of informational items for this operation
             */
            info?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationInfo[];
            /**
             * InitiatedBy contains information about who initiated the operations
             */
            initiatedBy?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationInitiatedBy;
            /**
             * Retry controls the strategy to apply if a sync fails
             */
            retry?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationRetry;
            /**
             * Sync contains parameters for the operation
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSync;
        }

        export interface ApplicationStatusOperationStateOperationInfo {
            name: string;
            value: string;
        }

        /**
         * InitiatedBy contains information about who initiated the operations
         */
        export interface ApplicationStatusOperationStateOperationInitiatedBy {
            /**
             * Automated is set to true if operation was initiated automatically by the application controller.
             */
            automated?: boolean;
            /**
             * Username contains the name of a user who started operation
             */
            username?: string;
        }

        /**
         * Retry controls the strategy to apply if a sync fails
         */
        export interface ApplicationStatusOperationStateOperationRetry {
            /**
             * Backoff controls how to backoff on subsequent retries of failed syncs
             */
            backoff?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationRetryBackoff;
            /**
             * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
             */
            limit?: number;
        }

        /**
         * Backoff controls how to backoff on subsequent retries of failed syncs
         */
        export interface ApplicationStatusOperationStateOperationRetryBackoff {
            /**
             * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
             */
            duration?: string;
            /**
             * Factor is a factor to multiply the base duration after each failed retry
             */
            factor?: number;
            /**
             * MaxDuration is the maximum amount of time allowed for the backoff strategy
             */
            maxDuration?: string;
        }

        /**
         * Sync contains parameters for the operation
         */
        export interface ApplicationStatusOperationStateOperationSync {
            /**
             * DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
             */
            dryRun?: boolean;
            /**
             * Manifests is an optional field that overrides sync source with a local directory for development
             */
            manifests?: string[];
            /**
             * Prune specifies to delete resources from the cluster that are no longer tracked in git
             */
            prune?: boolean;
            /**
             * Resources describes which resources shall be part of the sync
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncResources[];
            /**
             * Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
             */
            revision?: string;
            /**
             * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSource;
            /**
             * SyncOptions provide per-sync sync-options, e.g. Validate=false
             */
            syncOptions?: string[];
            /**
             * SyncStrategy describes how to perform the sync
             */
            syncStrategy?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSyncStrategy;
        }

        /**
         * SyncOperationResource contains resources to sync.
         */
        export interface ApplicationStatusOperationStateOperationSyncResources {
            group?: string;
            kind: string;
            name: string;
            namespace?: string;
        }

        /**
         * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
         */
        export interface ApplicationStatusOperationStateOperationSyncSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters[];
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceHelmParameters[];
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusOperationStateOperationSyncSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * SyncStrategy describes how to perform the sync
         */
        export interface ApplicationStatusOperationStateOperationSyncSyncStrategy {
            /**
             * Apply will perform a `kubectl apply` to perform the sync.
             */
            apply?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSyncStrategyApply;
            /**
             * Hook will submit any referenced resources to perform the sync. This is the default strategy
             */
            hook?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSyncStrategyHook;
        }

        /**
         * Apply will perform a `kubectl apply` to perform the sync.
         */
        export interface ApplicationStatusOperationStateOperationSyncSyncStrategyApply {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * Hook will submit any referenced resources to perform the sync. This is the default strategy
         */
        export interface ApplicationStatusOperationStateOperationSyncSyncStrategyHook {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * SyncResult is the result of a Sync operation
         */
        export interface ApplicationStatusOperationStateSyncResult {
            /**
             * Resources contains a list of sync result items for each individual resource in a sync operation
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultResources[];
            /**
             * Revision holds the revision this sync operation was performed to
             */
            revision: string;
            /**
             * Source records the application source information of the sync, used for comparing auto-sync
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSource;
        }

        /**
         * ResourceResult holds the operation result details of a specific resource
         */
        export interface ApplicationStatusOperationStateSyncResultResources {
            /**
             * Group specifies the API group of the resource
             */
            group: string;
            /**
             * HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.
             */
            hookPhase?: string;
            /**
             * HookType specifies the type of the hook. Empty for non-hook resources
             */
            hookType?: string;
            /**
             * Kind specifies the API kind of the resource
             */
            kind: string;
            /**
             * Message contains an informational or error message for the last sync OR operation
             */
            message?: string;
            /**
             * Name specifies the name of the resource
             */
            name: string;
            /**
             * Namespace specifies the target namespace of the resource
             */
            namespace: string;
            /**
             * Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
             */
            status?: string;
            /**
             * SyncPhase indicates the particular phase of the sync that this result was acquired in
             */
            syncPhase?: string;
            /**
             * Version specifies the API version of the resource
             */
            version: string;
        }

        /**
         * Source records the application source information of the sync, used for comparing auto-sync
         */
        export interface ApplicationStatusOperationStateSyncResultSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceHelmFileParameters[];
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceHelmParameters[];
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationStateSyncResultSourceHelmFileParameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationStateSyncResultSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusOperationStateSyncResultSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusOperationStateSyncResultSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * ResourceStatus holds the current sync and health status of a resource TODO: describe members of this type
         */
        export interface ApplicationStatusResources {
            group?: string;
            /**
             * HealthStatus contains information about the currently observed health state of an application or resource
             */
            health?: outputs.argoproj.v1alpha1.ApplicationStatusResourcesHealth;
            hook?: boolean;
            kind?: string;
            name?: string;
            namespace?: string;
            requiresPruning?: boolean;
            /**
             * SyncStatusCode is a type which represents possible comparison results
             */
            status?: string;
            version?: string;
        }

        /**
         * HealthStatus contains information about the currently observed health state of an application or resource
         */
        export interface ApplicationStatusResourcesHealth {
            /**
             * Message is a human-readable informational message describing the health status
             */
            message?: string;
            /**
             * Status holds the status code of the application or resource
             */
            status?: string;
        }

        /**
         * Summary contains a list of URLs and container images used by this application
         */
        export interface ApplicationStatusSummary {
            /**
             * ExternalURLs holds all external URLs of application child resources.
             */
            externalURLs?: string[];
            /**
             * Images holds all images of application child resources.
             */
            images?: string[];
        }

        /**
         * Sync contains information about the application's current sync status
         */
        export interface ApplicationStatusSync {
            /**
             * ComparedTo contains information about what has been compared
             */
            comparedTo?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedTo;
            /**
             * Revision contains information about the revision the comparison has been performed to
             */
            revision?: string;
            /**
             * Status is the sync state of the comparison
             */
            status: string;
        }

        /**
         * ComparedTo contains information about what has been compared
         */
        export interface ApplicationStatusSyncComparedTo {
            /**
             * Destination is a reference to the application's destination used for comparison
             */
            destination: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToDestination;
            /**
             * Source is a reference to the application's source used for comparison
             */
            source: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSource;
        }

        /**
         * Destination is a reference to the application's destination used for comparison
         */
        export interface ApplicationStatusSyncComparedToDestination {
            /**
             * Name is an alternate way of specifying the target cluster by its symbolic name
             */
            name?: string;
            /**
             * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
             */
            namespace?: string;
            /**
             * Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
             */
            server?: string;
        }

        /**
         * Source is a reference to the application's source used for comparison
         */
        export interface ApplicationStatusSyncComparedToSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusSyncComparedToSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusSyncComparedToSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusSyncComparedToSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceHelmFileParameters[];
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceHelmParameters[];
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusSyncComparedToSourceHelmFileParameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusSyncComparedToSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusSyncComparedToSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusSyncComparedToSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusSyncComparedToSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusSyncComparedToSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusSyncComparedToSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }
    }
}
